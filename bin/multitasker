#!/usr/bin/env node

process.title = 'multitasker';

var fs = require('fs'),
  path = require('path'),
  program = require('commander'),
  colors = require('colors'),
  moment = require('moment'),
  _ = require('underscore-node'),
  exec = require('child_process').exec;

program
  .version('0.0.1');

program
  .command('exec <tag> <commands...>')
  .description('execute the given commands in the directories tagged with the given tag')
  .option('-m, --max [number]', 'maximum number of concurrent executions [Infinity]', Infinity)
  .option('-s, --serial', 'execute the command in each directory serially instead of in parallel')
  .action(function(tag, commands, program) {

    var config = readConfig(),
      dirs,
      command = commands.join(' '),
      i,
      hub,
      executed = 0,
      total,
      loop,
      hub,
      start = moment(),
      end,
      duration;

    if (!config[tag]) {
      console.log('Tag "%s" does not exist; aborting.'.red, tag);
      process.exit(1);
    }

    dirs = config[tag];
    total = dirs.length;
    loop = program.serial ? 1 : Math.min(total, program.max);

    hub = new (require('events').EventEmitter);
    hub.on('executed', function() {
      executed++;
      if (executed == total) {
        end = moment();
        duration = moment.duration(end - start);
        console.log(
          'Done. (%s)'.green,
          (duration > moment.duration(2, 's') ?
            duration.humanize() :
            duration.asMilliseconds() + ' milliseconds')
        );
      }
    });

    function execute() {
      var dir = dirs.pop();
      if (dir) {
        exec(command, { cwd: dir }, function(error, stdout, stderr) {
          console.log(dir.blue);
          if (error != null) { console.log(error.message.red); }
          else {
            console.log(stdout);
            if (stderr) { console.log(stderr); }
          }
          hub.emit('executed');
          execute();
        });
      }
    }

    for (i = 0; i < loop; i++) {
      setTimeout(execute, 1);
    }

  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ multitasker exec work git pull');
    console.log('    $ multitasker exec projects "ls -alF"');
    console.log('');
  });

program
  .command('tag <tag> [dirs...]')
  .description('tag the current directory (or given directories)')
  .action(function(tag, dirs) {
    var config = readConfig();
    if (!config[tag]) { config[tag] = []; }
    if (!dirs.length) { dirs.push(process.cwd()); }
    config[tag] = _.uniq(
      config[tag].concat(
        dirs.map(function(dir) {
          return path.resolve(dir);
        }).filter(function(dir) {
          return fs.statSync(dir).isDirectory();
        })
      )
    );
    writeConfig(config);
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ multitasker tag work');
    console.log('    $ multitasker tag projects ../');
    console.log('');
  });

program
  .command('untag <tag> [dirs...]')
  .description('untag the current directory (or given directories)')
  .action(function(tag, dirs) {
    var config = readConfig();
    if (!dirs.length) { dirs.push(process.cwd()); }
    if (_.isArray(config[tag])) {
      config[tag] = _.without.apply(this,
        [config[tag]].concat(dirs.map(function(dir) { return path.resolve(dir); }))
      );
    }
    if (_.isEmpty(config[tag])) { delete config[tag]; }
    writeConfig(config);
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ multitasker untag work');
    console.log('    $ multitasker untag projects ../');
    console.log('');
  });

program
  .command('rmtag <tag>')
  .description('remove the given tag for all directories')
  .action(function(tag) {
    var config = readConfig();
    if (!config[tag]) {
      console.log('Tag "%s" does not exist.'.red, tag);
      process.exit(1);
    }
    delete config[tag];
    writeConfig(config);
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ multitasker rmtag projects');
    console.log('');
  });

program
  .command('tags')
  .description('list all tags')
  .option('-r, --reverse', 'list tags by directory rather than by tag')
  .action(function(program) {
    var config = readConfig(),
      keys,
      tag;
    if (_.isEmpty(config)) {
      console.log('No tags. Run `multitasker tag -h` to see how to tag directories.'.blue)
    }
    else {
      if (program.reverse) {
        config = reverseTags(config);
      }
      keys = _.keys(_.omit(config, function(value) { return !_.isEmpty(value); })).sort();
      keys.forEach(function(key) {
        console.log(key.green, '=>'.cyan, config[key].sort().join(', ').blue);
      });
    }
  });

program.parse(process.argv);

function reverseTags(tags) {
  var tag,
    dirs = {};
  for (tag in tags) {
    tags[tag].forEach(function(dir) {
      if (!dirs[dir]) { dirs[dir] = []; }
      dirs[dir].push(tag);
    });
  }
  return dirs;
}

function getConfigPath() {
  var home = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
  return path.join(home, '.multitasker.conf');
}

function readConfig() {
  try {
    return JSON.parse(fs.readFileSync(getConfigPath()));
  } catch(e) {
    return {};
  }
}

function writeConfig(config) {
  fs.writeFileSync(getConfigPath(), JSON.stringify(config));
}
